package ai;
import java.awt.*;
import javax.swing.*;
import java.awt.event.*;
import java.util.*;

public class bus_Gui_java_04160620 extends Frame implements ActionListener,KeyListener
{
	Button restart = new Button("随机打乱");//在下拉菜单中设置选项
	Button nextPath = new Button("提示");
	Button printPath = new Button("开始");
	Button exit = new Button("退出程序");
	Button path = new Button("步数");
	Button[] button;
	Panel panel,panel1;
	int row,col;
	private static int position,cellNum;
	final int dr[] = { 0,-1, 0, 1};
	final int dc[] = {-1, 0, 1, 0};
	public bus_Gui_java_04160620(int row,int col) {
		try {
			UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
		} catch (Exception e) {
			e.printStackTrace();
		}
		this.row = row;
		this.col = col;
		cellNum = row*col;
		
		restart.addActionListener(this);
		exit.addActionListener(this);
		nextPath.addActionListener(this);
		printPath.addActionListener(this);
		path.addActionListener(this);
		panel1 = new Panel(new GridLayout(1,3)) ;
		panel1.add(restart);
		panel1.add(nextPath);
		panel1.add(path);
		panel1.add(printPath);
		panel1.add(exit);
		panel = new Panel(new GridLayout(row,col)) ;
		button = new Button[cellNum];
		for(int i = 0; i < cellNum; i++) {
			if(i == cellNum - 1) {
				button[i] = new Button(" ");
			}else {
				button[i] = new Button(String.valueOf(i + 1));
			}
			button[i].setFont(new Font("Courier", 1, 20));
			button[i].addActionListener(this);
			button[i].addKeyListener(this);
			panel.add(button[i]);
		}
		position = cellNum - 1;
		this.add(BorderLayout.NORTH,panel1);
		this.add(BorderLayout.CENTER,panel);
		this.setTitle("八数码");
		this.setVisible(true);
		this.setSize(300,300);
		
		Toolkit kit = Toolkit.getDefaultToolkit();
		Dimension screenSize = kit.getScreenSize();
		int screenWidth = screenSize.width/2;
		int screenHeight = screenSize.height/2;
		int height = this.getHeight();
		int width = this.getWidth();
		this.setLocation(screenWidth-width/2, screenHeight-height/2);
		this.addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				System.exit(0);
			}
		});
	}
	void start() {
        int a[] = new int[9];
        do {
            int k = 0;
            Random random=new Random();
            Set set=new HashSet();
            while(set.size() < cellNum-1) {
                int n=random.nextInt(cellNum-1)+1;
                if(!set.contains(n)) {
                    set.add(n);
                    a[k++] = n;
                }
            }
            a[k] = 0;
        }while(!bfs_client_04160620.isok(a));
        for(int i = 0; i < 9; i++)
            button[i].setLabel(String.valueOf(a[i]));
        button[cellNum-1].setLabel(" ");
        position = cellNum - 1;
    }
	boolean win() {
		for(int i = 0; i < cellNum - 1; i++) {
			if(button[i].getLabel().equals(" ")) {
				return false;
			}else if(Integer.valueOf(button[i].getLabel()) != i+1) {
				return false;
			}
		}
		return true;
	}
	private boolean judge(Button a, Button b) {
		for(int i = 0; i < 4; i++) {
			if( (a.getX() == b.getX() + dr[i]*a.getWidth()) 
					&& (a.getY() == b.getY() + dc[i]*a.getHeight())) {
				return true;
			}
		}
		return false;
	}

	public void actionPerformed(ActionEvent e) 
	{
		StringBuffer state = new StringBuffer();
		if(e.getSource() == restart) 
		{
			start();
			return;
		}
		else if(e.getSource() == exit) 
		{
			System.exit(0);
			return;
		}
		else if(e.getSource() == nextPath) 
		{
			for(int i = 0; i < cellNum; i++) 
			{
				if(button[i].getLabel().equals(" ")) 
				{
					state.append('0');
				}
				else 
				{
					state.append(button[i].getLabel());
				}
			}
			String path = bfs_client_04160620.solve(state.toString());
			JOptionPane.showMessageDialog(this,"建议走："+path);
			return;
		}
		else if(e.getSource() == path) 
		{
			for(int i = 0; i < cellNum; i++) 
			{
				if(button[i].getLabel().equals(" ")) 
				{
					state.append('0');
				}
				else 
				{
					state.append(button[i].getLabel());
				}
			}
			String path1 = bfs_client_04160620.solve(state.toString());
			JOptionPane.showMessageDialog(this,"最少需要"+path1.length()+"步!");
			return;
		}
		else if(e.getSource() == printPath) 
		{
			for(int i = 0; i < cellNum; i++) 
			{
				if(button[i].getLabel().equals(" ")) 
				{
					state.append('0');
				}
				else 
				{
					state.append(button[i].getLabel());
				}
			}
			String path = bfs_client_04160620.solve(state.toString());
			for(int i = 0; i < path.length(); i++) {
				switch(path.charAt(i)) {
				case 'U':
					go(KeyEvent.VK_UP);
					break;
				case 'D':
					go(KeyEvent.VK_DOWN);
					break;
				case 'L':
					go(KeyEvent.VK_LEFT);
					break;
				case 'R':
					go(KeyEvent.VK_RIGHT);
					break;
				}
				try {
					Thread.sleep(1000);
				} catch (InterruptedException e1) {
					e1.printStackTrace();
				}
			}
		}
		for(int i = 0; i < cellNum; i++) {
			if(e.getSource() == button[i]) {
				if(!button[i].getLabel().equals(" ") && judge(button[i],button[position])) {
					button[position].setLabel(button[i].getLabel());
					button[i].setLabel(" ");
					position = i;
				}
			}
		}
		if(win()) {
			JOptionPane.showMessageDialog(this,"恭喜你完成了！！！");
		}
	}
	void go(int dir) {
		int x = position / col;
		int y = position % col;
		switch(dir) {
		case KeyEvent.VK_UP:
			if(x != 0) {
				button[position].setLabel(button[position-col].getLabel());
				button[position-col].setLabel(" ");
				position -= col;
			}
			break;
		case KeyEvent.VK_DOWN:
			if(x != row-1) {
				button[position].setLabel(button[position+col].getLabel());
				button[position+col].setLabel(" ");
				position += col;
			}
			break;
		case KeyEvent.VK_LEFT:
			if(y != 0) {
				button[position].setLabel(button[position-1].getLabel());
				button[position-1].setLabel(" ");
				position -= 1;
			}
			break;
		case KeyEvent.VK_RIGHT:
			if(y != col-1) {
				button[position].setLabel(button[position+1].getLabel());
				button[position+1].setLabel(" ");
				position += 1;
			}
			break;
		}
	}
	public void keyPressed(KeyEvent e) {
		go(e.getKeyCode());
		if(win()) {
			JOptionPane.showMessageDialog(this,"恭喜你完成了！！！");
		}
	}
	public void keyReleased(KeyEvent e) {}
	public void keyTyped(KeyEvent e) {}
	public static void main(String[] args) {
		new bus_Gui_java_04160620(3, 3);
	}
}